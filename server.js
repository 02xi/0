/******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

"use strict";

var fs = require("fs");
var bodyParser = require("body-parser");
var express = require("express");
var app = express();

if (!process.env.DISABLE_XORIGIN) {
  app.use(function (req, res, next) {
    var allowedOrigins = [
      "https://narrow-plane.gomix.me",
      "https://www.freecodecamp.com",
    ];
    var origin = req.headers.origin || "*";
    if (!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1) {
      // console.log(origin);
      res.setHeader("Access-Control-Allow-Origin", origin);
      res.header(
        "Access-Control-Allow-Headers",
        "Origin, X-Requested-With, Content-Type, Accept"
      );
    }
    next();
  });
}

app.use(express.static(__dirname + "/public"));
app.use(bodyParser.urlencoded({ extended: false }));

app.route("/_api/package.json").get(function (req, res, next) {
  console.log("requested");
  fs.readFile(__dirname + "/package.json", function (err, data) {
    if (err) return next(err);
    res.type("txt").send(data.toString());
  });
});

app.use(function (req, res, next) {
  console.log(req.method + " " + req.path + " - " + req.ip);
  next();
});

app.route("/_api/hello-console").get(function (req, res) {
  console.debug("Hello World");
  res.status(200);
  res.send("Hello World");
});

app.route("/_api/root-middleware-logger").get(function (req, res) {
  console.debug("Hello World");
  res.status(200);
  console.log(req.method + " " + req.path + " - " + req.ip);
  res.send(req.method + " " + req.path + " - " + req.ip);
});

app.get(
  "/_api/chain-middleware-time",
  function (req, res, next) {
    req.time = new Date().toString();
    next();
  },
  function (req, res) {
    res.send({ time: req.time });
  }
);

app.get(
  "/now",
  function (req, res, next) {
    req.time = new Date().toString();
    next();
  },
  function (req, res) {
    res.send({ time: req.time });
  }
);

app.get("/:word/echo", function (req, res) {
  console.log(req.params.word);
  res.send({ echo: req.params.word });
});

app
  .route("/name")
  .get(function (req, res) {
    res.send({ name: req.query.first + " " + req.query.last });
  })
  .post(function (req, res) {
    res.send({ name: req.body.first + " " + req.body.last });
  });

app.route("/json").get(function (req, res) {
  if (process.env.MESSAGE_STYLE == "uppercase") {
    res.json({ message: "HELLO JSON" });
  } else {
    res.json({ message: "Hello json" });
  }
});

app.route("/_api/use-env-vars").get(function (req, res) {
  //res.status(200);
  console.log(process.env.MESSAGE_STYLE);
  if (process.env.MESSAGE_STYLE === "uppercase") {
    res.json({ message: "Hello json".toUpperCase() });
  } else {
    res.json({ message: "Hello json" });
  }
});

app.get("/_api/add-body-parser", function (req, res) {
  res.send();
});

app.route("/").get(function (req, res) {
  res.sendFile(process.cwd() + "/views/index.html");
});

// app.route('/')
//     .get(function(req, res) {
// 		  //res.sendFile(process.cwd() + '/views/index.html');
//       res.status(200);
//       res.send('Hello Express');
//     })

// Respond not found to all the wrong routes
app.use(function (req, res, next) {
  res.status(404);
  res.type("txt").send("Not found");
});

// Error Middleware
app.use(function (err, req, res, next) {
  if (err) {
    res
      .status(err.status || 500)
      .type("txt")
      .send(err.message || "SERVER ERROR");
  }
});

var PORT = process.env.PORT || 3000;
app.listen(3000, function () {
  console.log("Node.js listening on " + PORT);
  console.log("Hello World");
});
